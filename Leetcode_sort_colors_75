Given an array nums with n objects colored red, white, or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white, and blue.

We will use the integers 0, 1, and 2 to represent the color red, white, and blue, respectively.

You must solve this problem without using the library's sort function.

 

Example 1:

Input: nums = [2,0,2,1,1,0]
Output: [0,0,1,1,2,2]
Example 2:

Input: nums = [2,0,1]
Output: [0,1,2]
 

Constraints:

n == nums.length
1 <= n <= 300
nums[i] is either 0, 1, or 2.


Code = 

class Solution:
    def merge(self, nums: List[int],l: int,mid: int, r:int):
        left = nums[l:mid+1]
        right = nums[mid+1:r+1]
        i = 0 
        j = 0 
        k = l
        while i < len(left) and j < len(right):
            if left[i] <= right[j]:
                nums[k] = left[i]
                i = i + 1
            else:
                nums[k] = right[j]
                j = j + 1 
            k = k + 1 
        while i < len(left):
            nums[k] = left[i]
            i = i + 1 
            k = k + 1 
        while j < len(right):
            nums[k] = right[j]
            j = j + 1 
            k = k + 1 
    def mergesort(self, nums: List[int],low,high):
        if low < high:
            mid = (low + high) // 2 
            self.mergesort(nums,low,mid)
            self.mergesort(nums,mid+1,high)
            self.merge(nums,low,mid,high)
        return nums
    def sortColors(self, nums: List[int]) -> None:
        """
        Do not return anything, modify nums in-place instead.
        """
        l = 0 
        h = len(nums) - 1 
        res = self.mergesort(nums,l,h)
        return res
